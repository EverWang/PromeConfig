# 多阶段构建 - 生产环境优化版本

# 前端构建阶段
FROM node:18-alpine AS frontend-builder

# 设置工作目录
WORKDIR /app

# 安装构建依赖
RUN apk add --no-cache git

# 复制package文件
COPY package*.json ./

# 安装依赖（仅生产依赖）
RUN npm ci --only=production --silent

# 复制源代码
COPY . .

# 构建前端应用
RUN npm run build

# 清理不必要的文件
RUN rm -rf node_modules src public

# 后端构建阶段
FROM golang:1.21-alpine AS backend-builder

# 安装构建依赖
RUN apk add --no-cache git ca-certificates tzdata

# 设置工作目录
WORKDIR /app

# 复制go模块文件
COPY backend/go.mod backend/go.sum ./

# 下载依赖
RUN go mod download
RUN go mod verify

# 复制源代码
COPY backend/ .

# 构建应用
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o server ./cmd/server

# 运行测试
RUN go test -v ./...

# 生产环境镜像
FROM alpine:3.18

# 安装运行时依赖
RUN apk --no-cache add \
    ca-certificates \
    tzdata \
    curl \
    && update-ca-certificates

# 创建非root用户
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# 设置时区
RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo "Asia/Shanghai" > /etc/timezone

# 创建应用目录
WORKDIR /app

# 创建必要的目录
RUN mkdir -p /app/logs /app/tmp && \
    chown -R appuser:appgroup /app

# 复制后端二进制文件
COPY --from=backend-builder --chown=appuser:appgroup /app/server /app/

# 复制前端构建文件
COPY --from=frontend-builder --chown=appuser:appgroup /app/dist /app/public

# 复制配置文件
COPY --chown=appuser:appgroup backend/.env* /app/

# 设置权限
RUN chmod +x /app/server

# 切换到非root用户
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/api/health || exit 1

# 暴露端口
EXPOSE 8080

# 设置环境变量
ENV GIN_MODE=release
ENV PORT=8080

# 启动应用
CMD ["/app/server"]