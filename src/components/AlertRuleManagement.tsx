import React, { useState } from 'react';
import { Plus, Edit, Trash2, AlertTriangle, Zap, Clock, Tag, Settings } from 'lucide-react';
import { AlertRuleService, AISettingsService } from '../services/apiService';
import type { AlertRule, AISettings } from '../lib/supabase';

interface AlertRuleManagementProps {
  alertRules: AlertRule[];
  onDataChange: () => void;
}

export const AlertRuleManagement: React.FC<AlertRuleManagementProps> = ({ alertRules, onDataChange }) => {
  const [showForm, setShowForm] = useState(false);
  const [showAIForm, setShowAIForm] = useState(false);
  const [showAISettings, setShowAISettings] = useState(false);
  const [editingRule, setEditingRule] = useState<AlertRule | null>(null);
  const [aiPrompt, setAiPrompt] = useState('');
  const [generatingAI, setGeneratingAI] = useState(false);
  const [saving, setSaving] = useState(false);
  const [aiSettings, setAiSettings] = useState<Partial<AISettings>>({
    provider: 'openai',
    apiKey: '',
    baseUrl: '',
    model: 'gpt-3.5-turbo',
    temperature: 0.3,
  });
  const [formData, setFormData] = useState({
    alert: '',
    expr: '',
    for: '5m',
    severity: 'warning',
    summary: '',
    description: '',
  });

  // 加载AI设置
  React.useEffect(() => {
    loadAISettings();
  }, []);

  const loadAISettings = async () => {
    try {
      const settings = await AISettingsService.getAISettings();
      if (settings) {
        setAiSettings(settings);
      }
    } catch (error) {
      console.error('Error loading AI settings:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSaving(true);
    
    const ruleData = {
      alert_name: formData.alert,
      expr: formData.expr,
      for_duration: formData.for,
      labels: { severity: formData.severity },
      annotations: {
        summary: formData.summary,
        description: formData.description,
      },
    };

    try {
      if (editingRule) {
        await AlertRuleService.updateAlertRule(editingRule.id, ruleData);
      } else {
        await AlertRuleService.createAlertRule(ruleData);
      }
      onDataChange();
      resetForm();
    } catch (error) {
      console.error('Error saving alert rule:', error);
      alert('保存失败，请重试');
    } finally {
      setSaving(false);
    }
  };

  const resetForm = () => {
    setFormData({
      alert: '',
      expr: '',
      for: '5m',
      severity: 'warning',
      summary: '',
      description: '',
    });
    setShowForm(false);
    setEditingRule(null);
  };

  const handleEdit = (rule: AlertRule) => {
    setEditingRule(rule);
    setFormData({
      alert: rule.alert_name,
      expr: rule.expr,
      for: rule.for_duration,
      severity: rule.labels.severity || 'warning',
      summary: rule.annotations.summary || '',
      description: rule.annotations.description || '',
    });
    setShowForm(true);
  };

  const handleDelete = async (id: string) => {
    if (!confirm('确定要删除这个告警规则吗？')) return;
    
    try {
      await AlertRuleService.deleteAlertRule(id);
      onDataChange();
    } catch (error) {
      console.error('Error deleting alert rule:', error);
      alert('删除失败，请重试');
    }
  };

  const handleAIGenerate = async () => {
    if (!aiPrompt.trim()) return;
    if (!aiSettings.apiKey) {
      alert('请先配置AI API密钥');
      setShowAISettings(true);
      return;
    }
    
    setGeneratingAI(true);
    
    try {
      const response = await callAIAPI(aiPrompt);
      
      setFormData({
        ...formData,
        alert: response.alert_name || response.alert || 'GeneratedAlert',
        expr: response.expr || 'up == 0',
        summary: response.summary || 'AI Generated Alert',
        description: response.description || 'Alert generated by AI',
      });
      
      setShowAIForm(false);
      setShowForm(true);
      setAiPrompt('');
    } catch (error) {
      console.error('AI generation failed:', error);
      alert('AI生成失败，请检查API配置和网络连接');
    } finally {
      setGeneratingAI(false);
    }
  };

  const saveAISettings = async () => {
    try {
      await AISettingsService.saveAISettings(aiSettings as Omit<AISettings, 'id' | 'user_id' | 'created_at' | 'updated_at'>);
      setShowAISettings(false);
      alert('AI设置保存成功');
    } catch (error) {
      console.error('Error saving AI settings:', error);
      alert('保存AI设置失败');
    }
  };

  const callAIAPI = async (prompt: string) => {
    const systemPrompt = `你是一个Prometheus告警规则专家。根据用户的描述，生成合适的Prometheus告警规则。

请返回JSON格式，包含以下字段：
- alert: 告警名称（英文，驼峰命名）
- expr: PromQL表达式
- summary: 简短描述
- description: 详细描述（可以包含模板变量如{{ $labels.instance }}）

示例：
{
  "alert_name": "HighCPUUsage",
  "expr": "100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 80",
  "summary": "CPU使用率过高",
  "description": "实例 {{ $labels.instance }} 的CPU使用率超过80%，当前值：{{ $value }}%"
}`;

    const requestBody = {
      model: aiSettings.model,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: prompt }
      ],
      temperature: aiSettings.temperature,
      max_tokens: 500,
    };

    const apiUrl = aiSettings.provider === 'openai' 
      ? (aiSettings.baseUrl || 'https://api.openai.com/v1/chat/completions')
      : aiSettings.baseUrl;

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${aiSettings.apiKey}`,
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      throw new Error(`API请求失败: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;
    
    if (!content) {
      throw new Error('AI返回内容为空');
    }

    try {
      return JSON.parse(content);
    } catch (e) {
      // 如果不是JSON格式，尝试解析文本
      return {
        alert_name: 'AIGeneratedAlert',
        expr: 'up == 0',
        summary: 'AI生成的告警',
        description: content,
      };
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500/20 text-red-400 border-red-500/30';
      case 'warning': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      case 'info': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  };

  return (
    <div className="p-8">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-white mb-2">Alert Rule Management</h1>
          <p className="text-gray-400">Configure and manage Prometheus alert rules</p>
        </div>
        <div className="flex gap-3">
          <button
            onClick={() => setShowAISettings(true)}
            className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
          >
            <Settings className="w-5 h-5" />
            AI设置
          </button>
          <button
            onClick={() => setShowAIForm(true)}
            className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
          >
            <Zap className="w-5 h-5" />
            AI Generate
          </button>
          <button
            onClick={() => setShowForm(true)}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
          >
            <Plus className="w-5 h-5" />
            Add Rule
          </button>
        </div>
      </div>

      {showAISettings && (
        <div className="bg-gray-800 rounded-xl p-6 border border-gray-700 mb-8">
          <h2 className="text-xl font-semibold text-white mb-6 flex items-center gap-2">
            <Settings className="w-5 h-5 text-gray-400" />
            AI API 配置
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                API提供商
              </label>
              <select
                value={aiSettings.provider}
                onChange={(e) => setAiSettings({ ...aiSettings, provider: e.target.value })}
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="openai">OpenAI</option>
                <option value="azure">Azure OpenAI</option>
                <option value="anthropic">Anthropic Claude</option>
                <option value="custom">自定义API</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                模型名称
              </label>
              <input
                type="text"
                value={aiSettings.model}
                onChange={(e) => setAiSettings({ ...aiSettings, model: e.target.value })}
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="gpt-3.5-turbo"
              />
            </div>

            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-300 mb-2">
                API密钥
              </label>
              <input
                type="password"
                value={aiSettings.apiKey}
                onChange={(e) => setAiSettings({ ...aiSettings, apiKey: e.target.value })}
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="sk-..."
              />
            </div>

            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-300 mb-2">
                API Base URL (可选)
              </label>
              <input
                type="url"
                value={aiSettings.baseUrl}
                onChange={(e) => setAiSettings({ ...aiSettings, baseUrl: e.target.value })}
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="https://api.openai.com/v1/chat/completions"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Temperature (0-1)
              </label>
              <input
                type="number"
                min="0"
                max="1"
                step="0.1"
                value={aiSettings.temperature}
                onChange={(e) => setAiSettings({ ...aiSettings, temperature: parseFloat(e.target.value) })}
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div className="flex items-end">
              <button
                onClick={saveAISettings}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors"
              >
                保存配置
              </button>
            </div>
          </div>
        </div>
      )}

      {showAIForm && (
        <div className="bg-gray-800 rounded-xl p-6 border border-gray-700 mb-8">
          <h2 className="text-xl font-semibold text-white mb-6 flex items-center gap-2">
            <Zap className="w-5 h-5 text-purple-400" />
            AI Alert Rule Generator
          </h2>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                描述你想要创建的告警规则
              </label>
              <textarea
                value={aiPrompt}
                onChange={(e) => setAiPrompt(e.target.value)}
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 h-24 resize-none"
                placeholder="例如：当CPU使用率超过80%时告警，监控磁盘空间不足，检测服务宕机..."
              />
            </div>
            <div className="flex gap-4">
              <button
                onClick={handleAIGenerate}
                disabled={generatingAI || !aiPrompt.trim()}
                className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
              >
                {generatingAI ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    生成中...
                  </>
                ) : (
                  <>
                    <Zap className="w-4 h-4" />
                    生成规则
                  </>
                )}
              </button>
              <button
                onClick={() => { setShowAIForm(false); setAiPrompt(''); }}
                className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg transition-colors"
              >
                取消
              </button>
            </div>
          </div>
        </div>
      )}

      {showForm && (
        <div className="bg-gray-800 rounded-xl p-6 border border-gray-700 mb-8">
          <h2 className="text-xl font-semibold text-white mb-6">
            {editingRule ? 'Edit Alert Rule' : 'Add New Alert Rule'}
          </h2>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Alert Name
                </label>
                <input
                  type="text"
                  value={formData.alert}
                  onChange={(e) => setFormData({ ...formData, alert: e.target.value })}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="e.g., HighCPUUsage"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Severity
                </label>
                <select
                  value={formData.severity}
                  onChange={(e) => setFormData({ ...formData, severity: e.target.value })}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="info">Info</option>
                  <option value="warning">Warning</option>
                  <option value="critical">Critical</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                PromQL Expression
              </label>
              <textarea
                value={formData.expr}
                onChange={(e) => setFormData({ ...formData, expr: e.target.value })}
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500 h-24 font-mono text-sm"
                placeholder="cpu_usage_percent > 80"
                required
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  For Duration
                </label>
                <select
                  value={formData.for}
                  onChange={(e) => setFormData({ ...formData, for: e.target.value })}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="1m">1 minute</option>
                  <option value="5m">5 minutes</option>
                  <option value="10m">10 minutes</option>
                  <option value="15m">15 minutes</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Summary
                </label>
                <input
                  type="text"
                  value={formData.summary}
                  onChange={(e) => setFormData({ ...formData, summary: e.target.value })}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Brief description of the alert"
                  required
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Description
              </label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500 h-20"
                placeholder="Detailed description with context and templating"
                required
              />
            </div>

            <div className="flex gap-4">
              <button
                type="submit"
                disabled={saving}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors"
              >
                {saving ? '保存中...' : (editingRule ? 'Update Rule' : 'Add Rule')}
              </button>
              <button
                type="button"
                onClick={resetForm}
                className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg transition-colors"
              >
                Cancel
              </button>
            </div>
          </form>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {alertRules.map((rule) => (
          <div key={rule.id} className="bg-gray-800 rounded-xl p-6 border border-gray-700 hover:border-gray-600 transition-colors">
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-yellow-500/20 rounded-lg">
                  <AlertTriangle className="w-5 h-5 text-yellow-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">{rule.alert_name}</h3>
                  <div className="flex items-center gap-2 mt-1">
                    <span className={`px-2 py-1 rounded-full text-xs border ${getSeverityColor(rule.labels.severity)}`}>
                      {rule.labels.severity}
                    </span>
                  </div>
                </div>
              </div>
              <div className="flex gap-2">
                <button
                  onClick={() => handleEdit(rule)}
                  className="p-2 text-gray-400 hover:text-blue-400 hover:bg-blue-500/10 rounded-lg transition-colors"
                >
                  <Edit className="w-4 h-4" />
                </button>
                <button
                  onClick={() => handleDelete(rule.id)}
                  className="p-2 text-gray-400 hover:text-red-400 hover:bg-red-500/10 rounded-lg transition-colors"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            </div>

            <div className="space-y-3">
              <div className="flex items-center gap-2 text-sm">
                <Clock className="w-4 h-4 text-gray-400" />
                <span className="text-gray-300">Duration: {rule.for_duration}</span>
              </div>

              <div>
                <p className="text-sm font-medium text-gray-300 mb-2">Expression:</p>
                <code className="block bg-gray-700 p-3 rounded-lg text-sm text-blue-300 font-mono">
                  {rule.expr}
                </code>
              </div>

              <div>
                <p className="text-sm font-medium text-gray-300 mb-1">Summary:</p>
                <p className="text-gray-400 text-sm">{rule.annotations.summary}</p>
              </div>

              <div>
                <p className="text-sm font-medium text-gray-300 mb-1">Description:</p>
                <p className="text-gray-400 text-sm">{rule.annotations.description}</p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};