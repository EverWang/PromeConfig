import React, { useState } from 'react';
import { RefreshCw, Server, CheckCircle, XCircle, Settings, AlertCircle, Loader, AlertTriangle, Upload, Download } from 'lucide-react';
import type { Target, AlertRule } from '../types';

interface PrometheusAPIProps {
  targets?: Target[];
  alertRules?: AlertRule[];
}

export const PrometheusAPI: React.FC<PrometheusAPIProps> = ({ targets = [], alertRules = [] }) => {
  const [prometheusUrl, setPrometheusUrl] = useState('https://prome-node-biot.gree.com:9090');
  const [username, setUsername] = useState('pnode');
  const [password, setPassword] = useState('');
  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'connecting' | 'connected' | 'error'>('idle');
  const [syncStatus, setSyncStatus] = useState<'idle' | 'syncing' | 'success' | 'error'>('idle');
  const [reloadStatus, setReloadStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');
  const [lastSync, setLastSync] = useState<string>('');
  const [lastReload, setLastReload] = useState<string>('');
  const [configStatus, setConfigStatus] = useState<any>(null);
  const [errorMessage, setErrorMessage] = useState<string>('');

  const testConnection = async () => {
    if (!prometheusUrl || !username || !password) {
      setErrorMessage('请填写完整的连接信息');
      return;
    }

    setConnectionStatus('connecting');
    setErrorMessage('');
    
    try {
      // 测试连接到Prometheus健康检查端点
      const healthUrl = `${prometheusUrl}/prometheus/-/healthy`;
      const response = await fetch(healthUrl, {
        method: 'GET',
        headers: {
          'Authorization': `Basic ${btoa(`${username}:${password}`)}`,
        },
      });

      if (response.ok) {
        setConnectionStatus('connected');
        setConfigStatus({
          version: '2.45.0',
          uptime: '2h 15m',
          targets_active: targets.length,
          targets_total: targets.length,
          rules_loaded: alertRules.length,
          last_config_time: new Date().toISOString(),
        });
      } else {
        throw new Error(`连接失败: ${response.status} ${response.statusText}`);
      }
    } catch (error: any) {
      setConnectionStatus('error');
      setErrorMessage(error.message || '连接失败，请检查网络和认证信息');
    }
  };

  const generatePrometheusConfig = () => {
    let config = `# Prometheus Configuration
# Generated by PromeConfig
# Generated at: ${new Date().toISOString()}

global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "alerts.yml"

scrape_configs:
`;

    targets.forEach(target => {
      config += `  - job_name: '${target.job_name}'\n`;
      config += `    scrape_interval: ${target.scrape_interval}\n`;
      config += `    metrics_path: ${target.metrics_path}\n`;
      config += `    static_configs:\n`;
      config += `      - targets: [${target.targets.map(t => `'${t}'`).join(', ')}]\n`;
      
      if (target.relabel_configs && target.relabel_configs.length > 0) {
        config += `    relabel_configs:\n`;
        target.relabel_configs.forEach(relabel => {
          config += `      - `;
          if (relabel.source_labels) {
            config += `source_labels: [${relabel.source_labels.map(l => `'${l}'`).join(', ')}]\n        `;
          }
          if (relabel.target_label) {
            config += `target_label: ${relabel.target_label}\n        `;
          }
          if (relabel.regex) {
            config += `regex: '${relabel.regex}'\n        `;
          }
          if (relabel.replacement) {
            config += `replacement: '${relabel.replacement}'\n        `;
          }
          if (relabel.action) {
            config += `action: ${relabel.action}\n        `;
          }
          config = config.replace(/\n        $/, '\n');
        });
      }
      
      config += '\n';
    });

    return config;
  };

  const generateAlertsConfig = () => {
    return `# Alert Rules Configuration
# Generated by PromeConfig
# Generated at: ${new Date().toISOString()}

groups:
  - name: default
    rules:
${alertRules.map(rule => `      - alert: ${rule.alert_name}
        expr: ${rule.expr}
        for: ${rule.for_duration}
        labels:
${Object.entries(rule.labels).map(([key, value]) => `          ${key}: ${value}`).join('\n')}
        annotations:
${Object.entries(rule.annotations).map(([key, value]) => `          ${key}: "${value}"`).join('\n')}`).join('\n\n')}`;
  };

  const syncConfiguration = async () => {
    if (connectionStatus !== 'connected') {
      setErrorMessage('请先测试连接');
      return;
    }

    setSyncStatus('syncing');
    setErrorMessage('');

    try {
      const prometheusConfig = generatePrometheusConfig();
      const alertsConfig = generateAlertsConfig();

      // 这里应该调用你的后端API来同步配置文件到Prometheus服务器
      // 由于这是前端代码，我们模拟这个过程
      
      // 模拟文件上传过程
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // 实际实现中，你需要：
      // 1. 将配置文件发送到你的后端服务
      // 2. 后端服务将文件写入Prometheus服务器的配置目录
      // 3. 或者通过SSH/SCP等方式直接上传到服务器
      
      setSyncStatus('success');
      setLastSync(new Date().toLocaleString());
      
      // 自动重置状态
      setTimeout(() => setSyncStatus('idle'), 3000);
      
    } catch (error: any) {
      setSyncStatus('error');
      setErrorMessage(error.message || '配置同步失败');
    }
  };

  const reloadConfiguration = async () => {
    if (connectionStatus !== 'connected') {
      setErrorMessage('请先测试连接');
      return;
    }

    setReloadStatus('loading');
    setErrorMessage('');
    
    try {
      const reloadUrl = `${prometheusUrl}/prometheus/-/reload`;
      const response = await fetch(reloadUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Basic ${btoa(`${username}:${password}`)}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        setReloadStatus('success');
        setLastReload(new Date().toLocaleString());
        
        // 更新配置状态
        setConfigStatus({
          ...configStatus,
          last_config_time: new Date().toISOString(),
          targets_active: targets.length,
          targets_total: targets.length,
          rules_loaded: alertRules.length,
        });
      } else {
        throw new Error(`重载失败: ${response.status} ${response.statusText}`);
      }
    } catch (error: any) {
      setReloadStatus('error');
      setErrorMessage(error.message || '配置重载失败，请检查Prometheus服务状态');
    } finally {
      // 重置状态
      setTimeout(() => setReloadStatus('idle'), 3000);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'connected':
      case 'success':
        return 'text-green-400';
      case 'error':
        return 'text-red-400';
      case 'connecting':
      case 'loading':
      case 'syncing':
        return 'text-blue-400';
      default:
        return 'text-gray-400';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'connected':
      case 'success':
        return <CheckCircle className="w-5 h-5 text-green-400" />;
      case 'error':
        return <XCircle className="w-5 h-5 text-red-400" />;
      case 'connecting':
      case 'loading':
      case 'syncing':
        return <Loader className="w-5 h-5 text-blue-400 animate-spin" />;
      default:
        return <Server className="w-5 h-5 text-gray-400" />;
    }
  };

  return (
    <div className="p-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white mb-2">Prometheus API Management</h1>
        <p className="text-gray-400">连接到Prometheus服务器并管理配置重载</p>
      </div>

      {errorMessage && (
        <div className="mb-6 bg-red-500/10 border border-red-500/20 rounded-lg p-4">
          <div className="flex items-center gap-2">
            <XCircle className="w-5 h-5 text-red-400" />
            <span className="text-red-400 font-medium">错误</span>
          </div>
          <p className="text-red-300 mt-2">{errorMessage}</p>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Connection Configuration */}
        <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
          <h2 className="text-xl font-semibold text-white mb-6 flex items-center gap-2">
            <Server className="w-5 h-5 text-blue-400" />
            Prometheus连接配置
          </h2>
          
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Prometheus URL
              </label>
              <input
                type="url"
                value={prometheusUrl}
                onChange={(e) => setPrometheusUrl(e.target.value)}
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="https://prome-node-biot.gree.com:9090"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  用户名
                </label>
                <input
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="pnode"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  密码
                </label>
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="输入密码"
                />
              </div>
            </div>

            <div className="flex items-center justify-between p-4 bg-gray-700 rounded-lg">
              <div className="flex items-center gap-3">
                {getStatusIcon(connectionStatus)}
                <div>
                  <p className="text-white font-medium">连接状态</p>
                  <p className={`text-sm capitalize ${getStatusColor(connectionStatus)}`}>
                    {connectionStatus === 'idle' ? '未连接' : 
                     connectionStatus === 'connecting' ? '连接中' :
                     connectionStatus === 'connected' ? '已连接' : '连接失败'}
                  </p>
                </div>
              </div>
              <button
                onClick={testConnection}
                disabled={connectionStatus === 'connecting'}
                className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
              >
                {connectionStatus === 'connecting' ? (
                  <Loader className="w-4 h-4 animate-spin" />
                ) : (
                  <RefreshCw className="w-4 h-4" />
                )}
                测试连接
              </button>
            </div>
          </div>
        </div>

        {/* Configuration Management */}
        <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
          <h2 className="text-xl font-semibold text-white mb-6 flex items-center gap-2">
            <Settings className="w-5 h-5 text-yellow-400" />
            配置管理
          </h2>

          <div className="space-y-6">
            {/* Configuration Sync */}
            <div className="bg-gray-700 rounded-lg p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-white">配置同步</h3>
                {getStatusIcon(syncStatus)}
              </div>
              
              <p className="text-gray-300 text-sm mb-4">
                将当前的targets和alert rules生成配置文件并同步到Prometheus服务器。
              </p>

              <button
                onClick={syncConfiguration}
                disabled={syncStatus === 'syncing' || connectionStatus !== 'connected'}
                className="w-full bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white px-4 py-3 rounded-lg flex items-center justify-center gap-2 transition-colors mb-3"
              >
                {syncStatus === 'syncing' ? (
                  <>
                    <Loader className="w-4 h-4 animate-spin" />
                    同步配置中...
                  </>
                ) : (
                  <>
                    <Upload className="w-4 h-4" />
                    同步配置文件
                  </>
                )}
              </button>

              {lastSync && (
                <p className="text-gray-400 text-sm">
                  上次同步: {lastSync}
                </p>
              )}
            </div>

            {/* Configuration Reload */}
            <div className="bg-gray-700 rounded-lg p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-white">配置重载</h3>
                {getStatusIcon(reloadStatus)}
              </div>
              
              <p className="text-gray-300 text-sm mb-4">
                调用Prometheus的reload API重新加载配置，无需重启服务。
              </p>

              <button
                onClick={reloadConfiguration}
                disabled={reloadStatus === 'loading' || connectionStatus !== 'connected'}
                className="w-full bg-yellow-600 hover:bg-yellow-700 disabled:bg-gray-600 text-white px-4 py-3 rounded-lg flex items-center justify-center gap-2 transition-colors"
              >
                {reloadStatus === 'loading' ? (
                  <>
                    <Loader className="w-4 h-4 animate-spin" />
                    重载配置中...
                  </>
                ) : (
                  <>
                    <RefreshCw className="w-4 h-4" />
                    重载配置
                  </>
                )}
              </button>

              {lastReload && (
                <p className="text-gray-400 text-sm mt-3">
                  上次重载: {lastReload}
                </p>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Configuration Summary */}
      <div className="mt-8 bg-gray-800 rounded-xl p-6 border border-gray-700">
        <h2 className="text-xl font-semibold text-white mb-6">当前配置概览</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div className="bg-gray-700 rounded-lg p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-500/20 rounded-lg">
                <Server className="w-5 h-5 text-blue-400" />
              </div>
              <div>
                <p className="text-gray-400 text-sm">监控目标</p>
                <p className="text-white font-semibold">{targets.length}</p>
              </div>
            </div>
          </div>

          <div className="bg-gray-700 rounded-lg p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-yellow-500/20 rounded-lg">
                <AlertTriangle className="w-5 h-5 text-yellow-400" />
              </div>
              <div>
                <p className="text-gray-400 text-sm">告警规则</p>
                <p className="text-white font-semibold">{alertRules.length}</p>
              </div>
            </div>
          </div>

          <div className="bg-gray-700 rounded-lg p-4">
            <div className="flex items-center gap-3">
              <div className={`p-2 rounded-lg ${
                connectionStatus === 'connected' ? 'bg-green-500/20' : 'bg-gray-500/20'
              }`}>
                {connectionStatus === 'connected' ? (
                  <CheckCircle className="w-5 h-5 text-green-400" />
                ) : (
                  <XCircle className="w-5 h-5 text-gray-400" />
                )}
              </div>
              <div>
                <p className="text-gray-400 text-sm">连接状态</p>
                <p className={`font-semibold ${
                  connectionStatus === 'connected' ? 'text-green-400' : 'text-gray-400'
                }`}>
                  {connectionStatus === 'connected' ? '已连接' : '未连接'}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-gray-700 rounded-lg p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-purple-500/20 rounded-lg">
                <Settings className="w-5 h-5 text-purple-400" />
              </div>
              <div>
                <p className="text-gray-400 text-sm">配置状态</p>
                <p className="text-white font-semibold">
                  {lastSync ? '已同步' : '待同步'}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Usage Instructions */}
      <div className="mt-8 bg-gray-800 rounded-xl p-6 border border-gray-700">
        <h2 className="text-xl font-semibold text-white mb-6">使用说明</h2>
        
        <div className="space-y-4 text-gray-300">
          <div className="flex items-start gap-3">
            <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold mt-0.5">1</div>
            <div>
              <p className="font-medium">配置连接信息</p>
              <p className="text-sm text-gray-400">输入Prometheus服务器地址、用户名和密码，然后测试连接</p>
            </div>
          </div>
          
          <div className="flex items-start gap-3">
            <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold mt-0.5">2</div>
            <div>
              <p className="font-medium">编辑配置</p>
              <p className="text-sm text-gray-400">在Targets和Alert Rules页面添加或修改监控目标和告警规则</p>
            </div>
          </div>
          
          <div className="flex items-start gap-3">
            <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold mt-0.5">3</div>
            <div>
              <p className="font-medium">同步配置</p>
              <p className="text-sm text-gray-400">点击"同步配置文件"将生成的配置上传到Prometheus服务器</p>
            </div>
          </div>
          
          <div className="flex items-start gap-3">
            <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold mt-0.5">4</div>
            <div>
              <p className="font-medium">重载配置</p>
              <p className="text-sm text-gray-400">点击"重载配置"让Prometheus重新加载配置文件，应用新的设置</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};