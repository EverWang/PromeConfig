import React, { useState } from 'react';
import { Eye, Download, Copy, CheckCircle, AlertCircle } from 'lucide-react';
import type { Target, AlertRule } from '../lib/supabase';

interface ConfigPreviewProps {
  targets: Target[];
  alertRules: AlertRule[];
}

export const ConfigPreview: React.FC<ConfigPreviewProps> = ({ targets, alertRules }) => {
  const [activeTab, setActiveTab] = useState<'prometheus' | 'alerts'>('prometheus');
  const [copied, setCopied] = useState(false);

  const generatePrometheusConfig = () => {
    let config = `# Prometheus Configuration
# Generated by PromeConfig

global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "alerts.yml"

scrape_configs:
`;

    targets?.forEach(target => {
      config += `  - job_name: '${target.job_name}'\n`;
      config += `    scrape_interval: ${target.scrape_interval}\n`;
      
      if (target.scrape_timeout) {
        config += `    scrape_timeout: ${target.scrape_timeout}\n`;
      }
      
      config += `    metrics_path: ${target.metrics_path}\n`;
      config += `    scheme: ${target.scheme || 'http'}\n`;
      
      if (target.honor_labels) {
        config += `    honor_labels: true\n`;
      }
      
      if (target.honor_timestamps === false) {
        config += `    honor_timestamps: false\n`;
      }
      
      if (target.params) {
        config += `    params:\n`;
        Object.entries(target.params).forEach(([key, values]) => {
          config += `      ${key}: [${values.map(v => `'${v}'`).join(', ')}]\n`;
        });
      }
      
      if (target.basic_auth) {
        config += `    basic_auth:\n`;
        config += `      username: ${target.basic_auth.username}\n`;
        config += `      password: ${target.basic_auth.password}\n`;
      }
      
      if (target.bearer_token) {
        config += `    bearer_token: ${target.bearer_token}\n`;
      }
      
      if (target.tls_config) {
        config += `    tls_config:\n`;
        if (target.tls_config.insecure_skip_verify) {
          config += `      insecure_skip_verify: true\n`;
        }
        if (target.tls_config.ca_file) {
          config += `      ca_file: ${target.tls_config.ca_file}\n`;
        }
        if (target.tls_config.cert_file) {
          config += `      cert_file: ${target.tls_config.cert_file}\n`;
        }
        if (target.tls_config.key_file) {
          config += `      key_file: ${target.tls_config.key_file}\n`;
        }
      }
      
      config += `    static_configs:\n`;
      
      // Parse targets field if it's a JSON string
      const targetsArray = typeof target.targets === 'string' 
        ? JSON.parse(target.targets) 
        : target.targets || [];
      config += `      - targets: [${targetsArray.map(t => `'${t}'`).join(', ')}]\n`;
      
      // Parse relabel_configs field if it's a JSON string
      const relabelConfigsArray = typeof target.relabel_configs === 'string' 
        ? JSON.parse(target.relabel_configs) 
        : target.relabel_configs || [];
      
      if (relabelConfigsArray && relabelConfigsArray.length > 0) {
        config += `    relabel_configs:\n`;
        relabelConfigsArray.forEach(relabel => {
          config += `      - `;
          if (relabel.source_labels) {
            config += `source_labels: [${relabel.source_labels.map(l => `'${l}'`).join(', ')}]\n        `;
          }
          if (relabel.separator) {
            config += `separator: '${relabel.separator}'\n        `;
          }
          if (relabel.target_label) {
            config += `target_label: ${relabel.target_label}\n        `;
          }
          if (relabel.regex) {
            config += `regex: '${relabel.regex}'\n        `;
          }
          if (relabel.modulus) {
            config += `modulus: ${relabel.modulus}\n        `;
          }
          if (relabel.replacement) {
            config += `replacement: '${relabel.replacement}'\n        `;
          }
          if (relabel.action) {
            config += `action: ${relabel.action}\n        `;
          }
          config = config.replace(/\n        $/, '\n');
        });
      }
      
      // Parse metric_relabel_configs field if it's a JSON string
      const metricRelabelConfigsArray = typeof target.metric_relabel_configs === 'string' 
        ? JSON.parse(target.metric_relabel_configs) 
        : target.metric_relabel_configs || [];
      
      if (metricRelabelConfigsArray && metricRelabelConfigsArray.length > 0) {
        config += `    metric_relabel_configs:\n`;
        metricRelabelConfigsArray.forEach(relabel => {
          config += `      - `;
          if (relabel.source_labels) {
            config += `source_labels: [${relabel.source_labels.map(l => `'${l}'`).join(', ')}]\n        `;
          }
          if (relabel.separator) {
            config += `separator: '${relabel.separator}'\n        `;
          }
          if (relabel.target_label) {
            config += `target_label: ${relabel.target_label}\n        `;
          }
          if (relabel.regex) {
            config += `regex: '${relabel.regex}'\n        `;
          }
          if (relabel.modulus) {
            config += `modulus: ${relabel.modulus}\n        `;
          }
          if (relabel.replacement) {
            config += `replacement: '${relabel.replacement}'\n        `;
          }
          if (relabel.action) {
            config += `action: ${relabel.action}\n        `;
          }
          config = config.replace(/\n        $/, '\n');
        });
      }
      
      config += '\n';
    });

    return config;
  };

  const generateAlertsConfig = () => {
    return `# Alert Rules Configuration
# Generated by PromeConfig

groups:
  - name: default
    rules:
${alertRules?.map(rule => `      - alert: ${rule.alert_name}
        expr: ${rule.expr}
        for: ${rule.for_duration}
        labels:
${Object.entries(rule.labels).map(([key, value]) => `          ${key}: ${value}`).join('\n')}
        annotations:
${Object.entries(rule.annotations).map(([key, value]) => `          ${key}: "${value}"`).join('\n')}`).join('\n\n')}`;
  };

  const currentConfig = activeTab === 'prometheus' ? generatePrometheusConfig() : generateAlertsConfig();

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(currentConfig);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const handleDownload = () => {
    const filename = activeTab === 'prometheus' ? 'prometheus.yml' : 'alerts.yml';
    const blob = new Blob([currentConfig], { type: 'text/yaml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const validateConfig = () => {
    const errors = [];
    
    if (activeTab === 'prometheus') {
      if ((targets?.length || 0) === 0) {
        errors.push('No scrape targets configured');
      }
      targets?.forEach(target => {
        if (!target.job_name) errors.push(`Missing job name for target`);
        // Parse targets field if it's a JSON string for validation
        const targetsArray = typeof target.targets === 'string' 
          ? JSON.parse(target.targets) 
          : target.targets || [];
        if ((targetsArray?.length || 0) === 0) {
          errors.push(`No targets specified for job: ${target.job_name}`);
        }
      });
    } else {
      if ((alertRules?.length || 0) === 0) {
        errors.push('No alert rules configured');
      }
      alertRules?.forEach(rule => {
        if (!rule.alert_name) errors.push('Missing alert name');
        if (!rule.expr) errors.push(`Missing expression for alert: ${rule.alert_name}`);
      });
    }

    return errors;
  };

  const errors = validateConfig();
  const isValid = (errors?.length || 0) === 0;

  return (
    <div className="p-8">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-white mb-2">Configuration Preview</h1>
          <p className="text-gray-400">Preview and export your Prometheus configuration</p>
        </div>
        <div className="flex gap-3">
          <button
            onClick={handleCopy}
            className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
          >
            {copied ? <CheckCircle className="w-5 h-5 text-green-400" /> : <Copy className="w-5 h-5" />}
            {copied ? 'Copied!' : 'Copy'}
          </button>
          <button
            onClick={handleDownload}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
          >
            <Download className="w-5 h-5" />
            Download
          </button>
        </div>
      </div>

      <div className="bg-gray-800 rounded-xl border border-gray-700 overflow-hidden">
        {/* Tab Navigation */}
        <div className="flex border-b border-gray-700">
          <button
            onClick={() => setActiveTab('prometheus')}
            className={`px-6 py-4 font-medium transition-colors ${
              activeTab === 'prometheus'
                ? 'bg-blue-600 text-white border-b-2 border-blue-500'
                : 'text-gray-400 hover:text-white hover:bg-gray-700'
            }`}
          >
            prometheus.yml
          </button>
          <button
            onClick={() => setActiveTab('alerts')}
            className={`px-6 py-4 font-medium transition-colors ${
              activeTab === 'alerts'
                ? 'bg-blue-600 text-white border-b-2 border-blue-500'
                : 'text-gray-400 hover:text-white hover:bg-gray-700'
            }`}
          >
            alerts.yml
          </button>
        </div>

        {/* Validation Status */}
        <div className={`px-6 py-3 border-b border-gray-700 ${
          isValid ? 'bg-green-500/10' : 'bg-red-500/10'
        }`}>
          <div className="flex items-center gap-2">
            {isValid ? (
              <>
                <CheckCircle className="w-5 h-5 text-green-400" />
                <span className="text-green-400 font-medium">Configuration is valid</span>
              </>
            ) : (
              <>
                <AlertCircle className="w-5 h-5 text-red-400" />
                <span className="text-red-400 font-medium">{errors?.length || 0} validation errors</span>
              </>
            )}
          </div>
          {!isValid && (
            <ul className="mt-2 space-y-1">
              {errors.map((error, index) => (
                <li key={index} className="text-red-300 text-sm ml-7">
                  • {error}
                </li>
              ))}
            </ul>
          )}
        </div>

        {/* Configuration Content */}
        <div className="p-6">
          <pre className="bg-gray-900 p-4 rounded-lg overflow-x-auto text-sm">
            <code className="text-gray-300 whitespace-pre-wrap font-mono">
              {currentConfig}
            </code>
          </pre>
        </div>
      </div>

      {/* Configuration Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
        <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-blue-500/20 rounded-lg">
              <Eye className="w-5 h-5 text-blue-400" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-white">Scrape Targets</h3>
              <p className="text-2xl font-bold text-blue-400">{targets?.length || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-yellow-500/20 rounded-lg">
              <AlertCircle className="w-5 h-5 text-yellow-400" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-white">Alert Rules</h3>
              <p className="text-2xl font-bold text-yellow-400">{alertRules?.length || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
          <div className="flex items-center gap-3">
            <div className={`p-2 rounded-lg ${
              isValid ? 'bg-green-500/20' : 'bg-red-500/20'
            }`}>
              {isValid ? (
                <CheckCircle className="w-5 h-5 text-green-400" />
              ) : (
                <AlertCircle className="w-5 h-5 text-red-400" />
              )}
            </div>
            <div>
              <h3 className="text-lg font-semibold text-white">Validation</h3>
              <p className={`text-2xl font-bold ${
                isValid ? 'text-green-400' : 'text-red-400'
              }`}>
                {isValid ? 'Valid' : 'Invalid'}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};